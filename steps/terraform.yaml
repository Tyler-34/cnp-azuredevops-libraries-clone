parameters:
  environment: ''
  location: ''
  overrideAction: ''
  project: ''
  stack: ''
  serviceConnection: ''
  tfversion: ''
  tfInitSub: ''


steps:
- bash: echo ${{ parameters.environment }}

- template: ./keyvault-read.yaml
  parameters:
    serviceConnection: ${{ parameters.serviceConnection }}
    environment: ${{ parameters.environment }}
      
- task: TerraformInstaller@0
  displayName: Terraform install
  inputs:
    terraformVersion: ${{ parameters.tfversion }}

- task: TerraformCLI@0
  displayName: Terraform init ${{ parameters.stack }}
  inputs:
    command: init
    terraformVersion: ${{ parameters.tfversion }}
    workingDirectory: '$(System.DefaultWorkingDirectory)/stack/${{ parameters.stack }}'
    backendType: azurerm
    backendServiceArm: ${{ parameters.serviceConnection }}
    backendAzureRmResourceGroupName: 'azure-control-${{ parameters.environment }}-rg'
    backendAzureRmResourceGroupLocation: ${{ parameters.location }}
    backendAzureRmStorageAccountName: $(controlStorageAccount)
    backendAzureRmStorageAccountSku: Standard_LRS
    backendAzureRmContainerName: subscription-tfstate
    backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/${{ parameters.environment }}/${{ parameters.stack }}/terraform.tfstate'
    commandOptions: '-backend-config=subscription_id=${{ parameters.tfInitSub }}'

- task: TerraformInstaller@0
  displayName: Terraform validate
  inputs:
    command: validate
    workingDirectory: '$(System.DefaultWorkingDirectory)/stack/${{ parameters.stack }}'

- task: TerraformCLI@0
  displayName: Terraform plan ${{ parameters.stack }}
  condition: and(succeeded(), in(parameters.overrideAction, 'plan', 'apply'))
  inputs:
    command: plan
    terraformVersion: ${{ parameters.tfversion }}
    workingDirectory: $(System.DefaultWorkingDirectory)/stack/${{ parameters.stack }}
    environmentServiceName: ${{ parameters.serviceConnection }}
    commandOptions: '-out tfplan-${{ parameters.project }}-${{ parameters.environment }}-${{ parameters.stack }}  -var environment=${{ parameters.environment }} -var project=${{ parameters.project }} -var builtFrom=$(Build.Repository.Name) -var product=${{ parameters.product }} -var-file $(System.DefaultWorkingDirectory)/environments/${{ parameters.environment }}/${{ parameters.environment }}.tfvars -lock=false'

- task: TerraformCLI@0
  displayName: Terraform apply ${{ parameters.stack }}
  condition: or(and(succeeded(), eq(variables['isMain'], true), ne('${{ parameters.overrideAction }}', 'destroy'), ne(variables['Build.Reason'], 'PullRequest')), eq('${{ parameters.overrideAction }}', 'apply'))
  inputs:
    command: apply
    terraformVersion: ${{ parameters.tfversion }}
    workingDirectory: $(System.DefaultWorkingDirectory)/stack/${{ parameters.stack }}
    environmentServiceName: ${{ parameters.serviceConnection }}
    commandOptions: '--auto-approve tfplan-${{ parameters.project }}-${{ parameters.environment }}-${{ parameters.stack }}'

- ${{ eq(parameters.overrideAction, 'destroy') }}:
    - task: TerraformCLI@0
      displayName: Terraform destroy ${{ parameters.stack }}
      condition: and(succeeded(), eq(variables['isMain'], true), eq('${{ parameters.overrideAction }}', 'destroy'))
      inputs:
        command: destroy
        terraformVersion: ${{ parameters.tfversion }}
        workingDirectory: $(System.DefaultWorkingDirectory)/stack/${{ parameters.stack }}
        environmentServiceName: ${{ parameters.serviceConnection }}
        commandOptions: '-var environment=${{ parameters.environment }} -var project=${{ parameters.project }} -var builtFrom=$(Build.Repository.Name) -var product=${{ parameters.product }} -var-file $(System.DefaultWorkingDirectory)/environments/${{ parameters.environment }}/${{ parameters.environment }}.tfvars'

- task: Bash@3
  displayName: "Remove local tfstate"
  inputs:
    targetType: 'inline'
    workingDirectory: '$(System.DefaultWorkingDirectory)/stack/${{ parameters.stack }}'
    script: |
      rm -f terraform.tfstate* && rm -rf .terraform/

- task: AzureCLI@2
  displayName: 'Unlock TF state if required'
  condition: always()
  inputs:
    scriptType: bash
    scriptLocation: inlineScript
    azureSubscription: ${{ parameters.serviceConnection }}
    inlineScript: |
      #!/bin/bash
      set -e
      component=$1
      storage_account_name=$2
      leaseExist=`az storage blob show --container-name tfstate --name $component.tfstate --account-name $storage_account_name | jq -r '.properties.lease.state'`

      if [ ${leaseExist} = "leased" ]; then
        az storage blob lease break --blob-name $component.tfstate --container-name tfstate --account-name $storage_account_name
        else
        exit 0
      fi
